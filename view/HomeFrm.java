/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package anh89.studentManagement.view;

import anh89.studentManagement.BSTree.Entry;
import anh89.studentManagement.Model.Registering;
import anh89.studentManagement.Model.Student;
import anh89.studentManagement.Model.Subject;


import anh89.studentManagement.controller.DataController;
import anh89.studentManagement.controller.DataControllerImp;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author USER
 */
public class HomeFrm extends javax.swing.JFrame implements ActionListener {
 private List<Subject> subjects;
 private List<Student>students;
 private List<Registering>registerings;
 
 
 private DefaultTableModel tableModeSubject;
 private DefaultTableModel tableModeStudent;
  private DataController dataController;  
    
  private int selectedSubjectIndex;
  private int selectedStudentIndex;
  private int selectedRegisteringIndex;
  
  
  
    /**
     * Creates new form 学生マネージャー
     */
    public HomeFrm() {
        initComponents();
        setLocationRelativeTo(null);
        addButtonGroup();
        addActionListener();
        subjects=new ArrayList<>();
        students=new ArrayList<>();
        registerings=new ArrayList<>();
        
        tableModeSubject=(DefaultTableModel) tbSubject.getModel();
        tableModeStudent=(DefaultTableModel) tbStudent.getModel();
        
        
        dataController=new DataControllerImp();
        loadData();
        showSubject();
      showStudent();
        //showRegistering();
        
        
        
        selectedSubjectIndex=-1;
         selectedStudentIndex=-1;
        selectedRegisteringIndex =-1;       
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroupSortSubject = new javax.swing.ButtonGroup();
        buttonGroupSearchSubject = new javax.swing.ButtonGroup();
        buttonGroupSortStudent = new javax.swing.ButtonGroup();
        buttonGroupSearchSutent = new javax.swing.ButtonGroup();
        buttonGroup1 = new javax.swing.ButtonGroup();
        buttonGroup2 = new javax.swing.ButtonGroup();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        jPanel5 = new javax.swing.JPanel();
        rbSortSubjectName = new javax.swing.JRadioButton();
        rbSortSubjectYear = new javax.swing.JRadioButton();
        jPanel6 = new javax.swing.JPanel();
        rbSearchSubjectName = new javax.swing.JRadioButton();
        rbSearchSubjectId = new javax.swing.JRadioButton();
        txtSearchSubjectByName = new javax.swing.JTextField();
        txtSearchSubjectById = new javax.swing.JTextField();
        btnSearchSubject = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tbSubject = new javax.swing.JTable();
        btnAddNewSubject = new javax.swing.JButton();
        btnRemoveSubject = new javax.swing.JButton();
        btnRefreshSubject = new javax.swing.JButton();
        btnEditSubject = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jPanel9 = new javax.swing.JPanel();
        jPanel10 = new javax.swing.JPanel();
        rbSortStudentId = new javax.swing.JRadioButton();
        rbSortStudentYear = new javax.swing.JRadioButton();
        jPanel11 = new javax.swing.JPanel();
        rbSearchStudentName = new javax.swing.JRadioButton();
        rbSearchStudentId = new javax.swing.JRadioButton();
        txtSearchStudentByName = new javax.swing.JTextField();
        txtSearchStudentById = new javax.swing.JTextField();
        btnSearchStudent = new javax.swing.JButton();
        btnAddNewStudent = new javax.swing.JButton();
        btnRemoveStudent = new javax.swing.JButton();
        btnRefreshStudent = new javax.swing.JButton();
        btnEditStudent = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        tbStudent = new javax.swing.JTable();
        btnDetailStudent = new javax.swing.JButton();
        jPanel4 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jPanel7 = new javax.swing.JPanel();
        btLogin = new javax.swing.JButton();
        btCancel = new javax.swing.JButton();
        lbId = new javax.swing.JLabel();
        lbPasword = new javax.swing.JLabel();
        txtIdLogin = new javax.swing.JTextField();
        txtPaswordLogin = new javax.swing.JPasswordField();
        jLabel4 = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenu2 = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("学生マネージャー");
        setResizable(false);

        jTabbedPane1.setToolTipText("");

        jPanel5.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "sort", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("MS UI Gothic", 0, 14))); // NOI18N
        jPanel5.setToolTipText("");

        rbSortSubjectName.setFont(new java.awt.Font("MS UI Gothic", 0, 14)); // NOI18N
        rbSortSubjectName.setText("Sort by specialty");
        rbSortSubjectName.setToolTipText("");

        rbSortSubjectYear.setFont(new java.awt.Font("MS UI Gothic", 0, 14)); // NOI18N
        rbSortSubjectYear.setText("Sort by school year");
        rbSortSubjectYear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbSortSubjectYearActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(rbSortSubjectName, javax.swing.GroupLayout.PREFERRED_SIZE, 243, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(rbSortSubjectYear, javax.swing.GroupLayout.PREFERRED_SIZE, 163, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(112, Short.MAX_VALUE))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(rbSortSubjectName)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(rbSortSubjectYear)
                .addContainerGap())
        );

        jPanel6.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "search", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("MS UI Gothic", 0, 14))); // NOI18N

        rbSearchSubjectName.setFont(new java.awt.Font("MS UI Gothic", 0, 14)); // NOI18N
        rbSearchSubjectName.setText("name ");

        rbSearchSubjectId.setFont(new java.awt.Font("MS UI Gothic", 0, 14)); // NOI18N
        rbSearchSubjectId.setText(" id");
        rbSearchSubjectId.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbSearchSubjectIdActionPerformed(evt);
            }
        });

        btnSearchSubject.setFont(new java.awt.Font("MS UI Gothic", 0, 12)); // NOI18N
        btnSearchSubject.setText("search");

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(rbSearchSubjectName, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(rbSearchSubjectId, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(29, 29, 29)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txtSearchSubjectByName)
                    .addComponent(txtSearchSubjectById))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnSearchSubject, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(rbSearchSubjectName)
                    .addComponent(txtSearchSubjectByName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 14, Short.MAX_VALUE)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(rbSearchSubjectId)
                    .addComponent(txtSearchSubjectById, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addComponent(btnSearchSubject, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        tbSubject.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "name", "credit", "number of lesson", "kind"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tbSubject.setToolTipText("");
        jScrollPane1.setViewportView(tbSubject);

        btnAddNewSubject.setFont(new java.awt.Font("MS UI Gothic", 0, 14)); // NOI18N
        btnAddNewSubject.setText("add new subject");
        btnAddNewSubject.setToolTipText("");
        btnAddNewSubject.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddNewSubjectActionPerformed(evt);
            }
        });

        btnRemoveSubject.setFont(new java.awt.Font("MS UI Gothic", 0, 14)); // NOI18N
        btnRemoveSubject.setText("remove");
        btnRemoveSubject.setToolTipText("");

        btnRefreshSubject.setFont(new java.awt.Font("MS UI Gothic", 0, 14)); // NOI18N
        btnRefreshSubject.setText("refresh");
        btnRefreshSubject.setToolTipText("");

        btnEditSubject.setFont(new java.awt.Font("MS UI Gothic", 0, 14)); // NOI18N
        btnEditSubject.setText("edit subject");
        btnEditSubject.setToolTipText("");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(35, 35, 35)
                .addComponent(jPanel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane1))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(30, 30, 30)
                        .addComponent(btnRefreshSubject, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 23, Short.MAX_VALUE)
                        .addComponent(btnAddNewSubject, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(76, 76, 76)
                        .addComponent(btnEditSubject, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(79, 79, 79)
                        .addComponent(btnRemoveSubject, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(31, 31, 31))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(24, 24, 24)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 366, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnEditSubject)
                    .addComponent(btnRemoveSubject)
                    .addComponent(btnAddNewSubject)
                    .addComponent(btnRefreshSubject))
                .addGap(42, 42, 42))
        );

        jTabbedPane1.addTab("subject management", jPanel1);

        jPanel10.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "sort", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("MS UI Gothic", 0, 14))); // NOI18N
        jPanel10.setToolTipText("");

        rbSortStudentId.setFont(new java.awt.Font("MS UI Gothic", 0, 14)); // NOI18N
        rbSortStudentId.setText("Sort by id");
        rbSortStudentId.setToolTipText("");

        rbSortStudentYear.setFont(new java.awt.Font("MS UI Gothic", 0, 14)); // NOI18N
        rbSortStudentYear.setText("Sort by school year");
        rbSortStudentYear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbSortStudentYearActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel10Layout = new javax.swing.GroupLayout(jPanel10);
        jPanel10.setLayout(jPanel10Layout);
        jPanel10Layout.setHorizontalGroup(
            jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel10Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(rbSortStudentId, javax.swing.GroupLayout.PREFERRED_SIZE, 243, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(rbSortStudentYear, javax.swing.GroupLayout.PREFERRED_SIZE, 163, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(112, Short.MAX_VALUE))
        );
        jPanel10Layout.setVerticalGroup(
            jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel10Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(rbSortStudentId)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(rbSortStudentYear)
                .addContainerGap())
        );

        jPanel11.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "search", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("MS UI Gothic", 0, 14))); // NOI18N

        rbSearchStudentName.setFont(new java.awt.Font("MS UI Gothic", 0, 14)); // NOI18N
        rbSearchStudentName.setText("name ");

        rbSearchStudentId.setFont(new java.awt.Font("MS UI Gothic", 0, 14)); // NOI18N
        rbSearchStudentId.setText(" id");
        rbSearchStudentId.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbSearchStudentIdActionPerformed(evt);
            }
        });

        btnSearchStudent.setFont(new java.awt.Font("MS UI Gothic", 0, 12)); // NOI18N
        btnSearchStudent.setText("search");

        javax.swing.GroupLayout jPanel11Layout = new javax.swing.GroupLayout(jPanel11);
        jPanel11.setLayout(jPanel11Layout);
        jPanel11Layout.setHorizontalGroup(
            jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel11Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(rbSearchStudentName, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(rbSearchStudentId, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(29, 29, 29)
                .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txtSearchStudentByName, javax.swing.GroupLayout.DEFAULT_SIZE, 189, Short.MAX_VALUE)
                    .addComponent(txtSearchStudentById))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnSearchStudent, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        jPanel11Layout.setVerticalGroup(
            jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel11Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(rbSearchStudentName)
                    .addComponent(txtSearchStudentByName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 14, Short.MAX_VALUE)
                .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(rbSearchStudentId)
                    .addComponent(txtSearchStudentById, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
            .addGroup(jPanel11Layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addComponent(btnSearchStudent, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        btnAddNewStudent.setFont(new java.awt.Font("MS UI Gothic", 0, 14)); // NOI18N
        btnAddNewStudent.setText("add new student");
        btnAddNewStudent.setToolTipText("");

        btnRemoveStudent.setFont(new java.awt.Font("MS UI Gothic", 0, 14)); // NOI18N
        btnRemoveStudent.setText("remove");
        btnRemoveStudent.setToolTipText("");

        btnRefreshStudent.setFont(new java.awt.Font("MS UI Gothic", 0, 14)); // NOI18N
        btnRefreshStudent.setText("refresh");
        btnRefreshStudent.setToolTipText("");

        btnEditStudent.setFont(new java.awt.Font("MS UI Gothic", 0, 14)); // NOI18N
        btnEditStudent.setText("edit student");
        btnEditStudent.setToolTipText("");

        tbStudent.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "name", "major"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tbStudent.setToolTipText("");
        jScrollPane3.setViewportView(tbStudent);

        btnDetailStudent.setFont(new java.awt.Font("MS UI Gothic", 0, 14)); // NOI18N
        btnDetailStudent.setText("detail");

        javax.swing.GroupLayout jPanel9Layout = new javax.swing.GroupLayout(jPanel9);
        jPanel9.setLayout(jPanel9Layout);
        jPanel9Layout.setHorizontalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel9Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel9Layout.createSequentialGroup()
                        .addComponent(btnDetailStudent, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(18, 18, 18)
                        .addComponent(btnRefreshStudent, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(26, 26, 26)
                        .addComponent(btnAddNewStudent, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(30, 30, 30)
                        .addComponent(btnEditStudent, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(42, 42, 42)
                        .addComponent(btnRemoveStudent, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(65, 65, 65))
                    .addGroup(jPanel9Layout.createSequentialGroup()
                        .addComponent(jPanel10, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(35, 35, 35)
                        .addComponent(jPanel11, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addContainerGap())
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel9Layout.createSequentialGroup()
                        .addComponent(jScrollPane3)
                        .addContainerGap())))
        );
        jPanel9Layout.setVerticalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel9Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel11, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel10, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(21, 21, 21)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 351, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(btnEditStudent)
                        .addComponent(btnRemoveStudent)
                        .addComponent(btnAddNewStudent)
                        .addComponent(btnRefreshStudent))
                    .addComponent(btnDetailStudent))
                .addGap(42, 42, 42))
        );

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jPanel9, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jPanel9, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        jTabbedPane1.addTab("student management", jPanel2);

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 839, Short.MAX_VALUE)
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 577, Short.MAX_VALUE)
        );

        jTabbedPane1.addTab("", jPanel4);

        btLogin.setBackground(new java.awt.Color(0, 0, 0));
        btLogin.setForeground(new java.awt.Color(255, 255, 255));
        btLogin.setText("login");
        btLogin.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btLoginActionPerformed(evt);
            }
        });

        btCancel.setBackground(new java.awt.Color(255, 0, 51));
        btCancel.setForeground(new java.awt.Color(255, 255, 51));
        btCancel.setText("cancel");
        btCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btCancelActionPerformed(evt);
            }
        });

        lbId.setText("id");

        lbPasword.setText("pasword");

        txtIdLogin.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtIdLoginActionPerformed(evt);
            }
        });

        jLabel4.setFont(new java.awt.Font("MS UI Gothic", 1, 18)); // NOI18N
        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel4.setText("login");

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addGap(51, 51, 51)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(lbId, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(lbPasword, javax.swing.GroupLayout.DEFAULT_SIZE, 48, Short.MAX_VALUE))
                        .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel7Layout.createSequentialGroup()
                                .addGap(14, 14, 14)
                                .addComponent(txtIdLogin, javax.swing.GroupLayout.PREFERRED_SIZE, 199, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel7Layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(txtPaswordLogin, javax.swing.GroupLayout.PREFERRED_SIZE, 195, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 88, Short.MAX_VALUE))
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addComponent(btLogin, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btCancel, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(58, 58, 58))))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel7Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(132, 132, 132))
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(16, 16, 16)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lbId, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtIdLogin, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(31, 31, 31)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lbPasword, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtPaswordLogin, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(42, 42, 42)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btLogin)
                    .addComponent(btCancel))
                .addContainerGap(61, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(41, 41, 41)
                .addComponent(jPanel7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(398, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(35, 35, 35)
                .addComponent(jPanel7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(284, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("personal page", jPanel3);

        jMenu1.setText("File");
        jMenuBar1.add(jMenu1);

        jMenu2.setText("Edit");
        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 844, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1, javax.swing.GroupLayout.Alignment.TRAILING)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void rbSearchStudentIdActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbSearchStudentIdActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_rbSearchStudentIdActionPerformed

    private void rbSortStudentYearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbSortStudentYearActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_rbSortStudentYearActionPerformed

    private void rbSearchSubjectIdActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbSearchSubjectIdActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_rbSearchSubjectIdActionPerformed

    private void rbSortSubjectYearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbSortSubjectYearActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_rbSortSubjectYearActionPerformed

    private void btnAddNewSubjectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddNewSubjectActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_btnAddNewSubjectActionPerformed

    private void btLoginActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btLoginActionPerformed
        // TODO add your handling code here:
//        var id=txtId.getText();
//        // var email=txtEmail.getText();
//        var pasword=new String(txtPasword.getPassword());
//        // accountStudent anh=new accountStudent(id,pasword);
//        if(acount!=null&&acount.contains(anh)){
//            homeFrm homefrm1=new homeFrm();
//            homefrm1.setVisible(true);
//            this.dispose();
//
//        }else
//        {
//
//        }
    }//GEN-LAST:event_btLoginActionPerformed

    private void btCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btCancelActionPerformed
        // TODO add your handling code here:

        dispose();

    }//GEN-LAST:event_btCancelActionPerformed

    private void txtIdLoginActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtIdLoginActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtIdLoginActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(HomeFrm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(HomeFrm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(HomeFrm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(HomeFrm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

  
        
      java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new HomeFrm().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btCancel;
    private javax.swing.JButton btLogin;
    private javax.swing.JButton btnAddNewStudent;
    private javax.swing.JButton btnAddNewSubject;
    private javax.swing.JButton btnDetailStudent;
    private javax.swing.JButton btnEditStudent;
    private javax.swing.JButton btnEditSubject;
    private javax.swing.JButton btnRefreshStudent;
    private javax.swing.JButton btnRefreshSubject;
    private javax.swing.JButton btnRemoveStudent;
    private javax.swing.JButton btnRemoveSubject;
    private javax.swing.JButton btnSearchStudent;
    private javax.swing.JButton btnSearchSubject;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.ButtonGroup buttonGroup2;
    private javax.swing.ButtonGroup buttonGroupSearchSubject;
    private javax.swing.ButtonGroup buttonGroupSearchSutent;
    private javax.swing.ButtonGroup buttonGroupSortStudent;
    private javax.swing.ButtonGroup buttonGroupSortSubject;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel11;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JLabel lbId;
    private javax.swing.JLabel lbPasword;
    private javax.swing.JRadioButton rbSearchStudentId;
    private javax.swing.JRadioButton rbSearchStudentName;
    private javax.swing.JRadioButton rbSearchSubjectId;
    private javax.swing.JRadioButton rbSearchSubjectName;
    private javax.swing.JRadioButton rbSortStudentId;
    private javax.swing.JRadioButton rbSortStudentYear;
    private javax.swing.JRadioButton rbSortSubjectName;
    private javax.swing.JRadioButton rbSortSubjectYear;
    private javax.swing.JTable tbStudent;
    private javax.swing.JTable tbSubject;
    private javax.swing.JTextField txtIdLogin;
    private javax.swing.JPasswordField txtPaswordLogin;
    private javax.swing.JTextField txtSearchStudentById;
    private javax.swing.JTextField txtSearchStudentByName;
    private javax.swing.JTextField txtSearchSubjectById;
    private javax.swing.JTextField txtSearchSubjectByName;
    // End of variables declaration//GEN-END:variables

    private void addButtonGroup() {
        buttonGroupSortSubject.add(rbSortSubjectName);
        buttonGroupSortSubject.add(rbSortSubjectYear);
        
         buttonGroupSortStudent.add(rbSortStudentId);
          buttonGroupSortStudent.add(rbSortStudentYear);
         
          
         /// 
        buttonGroupSearchSubject.add(rbSearchSubjectId);
         buttonGroupSearchSubject.add(rbSearchSubjectName);
         
         buttonGroupSearchSutent.add(rbSearchStudentId);
        buttonGroupSearchSutent.add(rbSearchStudentName);
      
    }

    @Override
    public void actionPerformed(ActionEvent e) {
     var obj=e.getSource();
     if(obj.equals(btnAddNewSubject)){
         AddSubjectFrm addSubjectfrm=new AddSubjectFrm(this,rootPaneCheckingEnabled);
         addSubjectfrm.setVisible(true);
     }
     else if(obj.equals(btnEditSubject)){
         editSubject();
       
     }
     else if(obj.equals(btnRefreshSubject)){
       refreshSubjects();     }
     else if(obj.equals(btnRemoveSubject)){
         removeSubject();
         }
     else if(obj.equals(rbSortSubjectName)||obj.equals(rbSortSubjectYear)){
         sortSubject(obj);
     }else if(obj.equals(btnSearchSubject)){
         searchSubject();
     }else if(obj.equals(btnAddNewStudent)){
          AddStudentFrm addStudentfrm=new AddStudentFrm(this,rootPaneCheckingEnabled);
         addStudentfrm.setVisible(true);
         
     }else if(obj.equals(btnEditStudent)){
         editStudent();
     }else if(obj.equals(btnRefreshStudent)){
         refreshStudent();
     }else if(obj.equals(btnRemoveStudent)){
        removeStudent();
     }else if(obj.equals(btnSearchStudent)){
         searchStudent();
     }else if(obj.equals(btnDetailStudent)){
         detailStudent();
     }else if(obj.equals(rbSortStudentId)||obj.equals(rbSortStudentYear)){
         sortStudent(obj);
     }
     else if(obj.equals(btLogin)){
         LoginStudent();
     }
     else if(obj.equals(btCancel)){
         dispose();
         
     }
     
               
    }

    private void addActionListener() {
         btnAddNewSubject.addActionListener(this);
              btnEditSubject.addActionListener(this);
       btnRefreshSubject.addActionListener(this);
            btnRemoveSubject.addActionListener(this);   
       btnSearchSubject.addActionListener(this);        
       rbSearchSubjectId.addActionListener(this);        
        rbSearchSubjectName.addActionListener(this);       
        rbSortSubjectName.addActionListener(this);       
        rbSortSubjectYear.addActionListener(this);     
        /////
         btnAddNewStudent.addActionListener(this);
              btnEditStudent.addActionListener(this);
       btnRefreshStudent.addActionListener(this);
            btnRemoveStudent.addActionListener(this);   
       btnSearchStudent.addActionListener(this);    
       btnDetailStudent.addActionListener(this);
       rbSearchStudentId.addActionListener(this);        
        rbSearchStudentName.addActionListener(this);       
        rbSortStudentId.addActionListener(this);       
        rbSortStudentYear.addActionListener(this);  
     ////
        
        //
        btLogin.addActionListener(this);
        btCancel.addActionListener(this);
        
    }
    public void addSubjectCallBack(Subject subject){
        subjects.add(subject);
        showASubject(subject);
          writeDataToFile(1);
        
    }

    private void showASubject(Subject subject) {
        Object[] row=new Object[]{
            subject.getId(),subject.getName(),subject.getCredit(),
            subject.getLessonOfNumber(),subject.getKind()
            
        };
       tableModeSubject.addRow(row);
        
    }

    private void writeDataToFile(int i) {
      switch(i){
          case DataController.SUBJECT:
              dataController.writeToFile(subjects, DataController.SUBJECT_FILE);
              break;
          case DataController.STUDENT:
              dataController.writeToFile(students, DataController.STUDENT_FILE);
              break;
          case DataController.REGISTERING:
              dataController.writeToFile(registerings,DataController.REGISTERING_FILE);
          break;
          
            default:
                System.out.println("Invalid choice!");
      }
    }
    
    private void loadData(){
        List<Subject> listSubject=dataController.<Subject>readDataFromFile(DataController.SUBJECT_FILE);
        List<Student> listSutdent=dataController.<Student>readDataFromFile(DataController.STUDENT_FILE);
        List<Registering> listRegistering=dataController.<Registering>readDataFromFile(DataController.REGISTERING_FILE);
        if(listSubject!=null){
            subjects.addAll(listSubject);
        }
        if(listSutdent!=null)students.addAll(listSutdent);
        if(listRegistering!=null)registerings.addAll(listRegistering);
        
        dataController.updateSubjectId(subjects);
         dataController.updateStudentId(students);
        
    }

    private void showSubject() {
        for (var a:subjects){
            showASubject(a);
        }
    }

    private void removeSubject() {
var index=tbSubject.getSelectedRow();
if(index>-1){
 int confirm=   JOptionPane.showConfirmDialog(rootPane,"you realy want to remove this subject");
    if(confirm==JOptionPane.OK_OPTION){
     //   reloadSubject();
        int index1=(int) tableModeSubject.getValueAt(index, 0);
         if(selectedSubjectIndex==-1||subjects.get(selectedSubjectIndex).getId()!=index1){
              selectedSubjectIndex=dataController.searchSubjectById(subjects,index1);
             
         }
        
        if(selectedSubjectIndex!=-1)
         subjects.remove(selectedSubjectIndex);
    tableModeSubject.removeRow(index);
    selectedSubjectIndex=-1;
    
                //tableModeSubject.fireTableDataChanged();
  //  dataController.<Subject>writeToFile(subjects, DataController.SUBJECT_FILE);
            writeDataToFile(1);
    }
    
}
else{
    JOptionPane.showMessageDialog(rootPane, "please selecte  a object to remove");
}


    }

    void editSubjectCallback(Subject e) {
       tableModeSubject.removeRow(selectedSubjectIndex);//removeRow(selectedSubjectIndex)
       var row=new Object[]{
           e.getId(),e.getName(),e.getCredit(),e.getLessonOfNumber(),e.getKind()
       };
        tableModeSubject.insertRow(selectedSubjectIndex, row);
        writeDataToFile(1);
      //  selectedSubjectIndex=-1;        
    }

    private void editSubject() {
//selectedSubjectIndex=tbSubject.getSelectedRow();
int index1=tbSubject.getSelectedRow();

if(index1>=0){
  //  reloadSubject();
  int index=(int) tableModeSubject.getValueAt(index1, 0);
  if(selectedSubjectIndex==-1||subjects.get(selectedSubjectIndex).getId()!=index){
       selectedSubjectIndex=dataController.searchSubjectById(subjects,index);
      
  }
    
   
    var editSubjectFrm=new EditSubjectFrm(this,true,subjects.get(selectedSubjectIndex));
    editSubjectFrm.setVisible(true);
}
else{
    JOptionPane.showMessageDialog(rootPane, "please select an suject to edit");
}
    }

    private void sortSubject(Object obj) {
        tableModeSubject.setRowCount(0);
        if(obj.equals(rbSortSubjectName)){
        dataController.sortSubjectById(subjects);
       showSubjects(subjects);
        }
        else if(obj.equals(rbSortSubjectYear)){
            dataController.sortSubjectByNameASC(subjects);
            showSubjects(subjects);
        }
    }

    private void showSubjects(List<Subject> subjects) {
            for(var a:subjects){
                showASubject(a);
            }
    }
    
    private void searchSubject() {
        reloadSubject();
    //    List<Subject>copySubject=new ArrayList<>(subjects);
     List<Subject>copySubject=new ArrayList<>();
        if(rbSearchSubjectName.isSelected()){
            var key=txtSearchSubjectByName.getText();
            if(key.isEmpty()){
                JOptionPane.showMessageDialog(rootPane,"please entern name of subject you want to find");
            }else{
              //  subjects.clear();
                
                copySubject.addAll(dataController.searchSubjectByName(subjects, key));
                showResultSubjectSearch(copySubject);
                if(subjects.size()>0){
                    JOptionPane.showMessageDialog(rootPane,"have "+copySubject.size()+" result");
                }
                else{
                    JOptionPane.showMessageDialog(rootPane,"this  subject not exist");
                }
                
                
                
            }
            
        }else if(rbSearchSubjectId.isSelected()){
         var key=txtSearchSubjectById.getText();
        if(key.isEmpty()){
           JOptionPane.showMessageDialog(rootPane,"please entern name of subject you want to find"); 
        }else{
           // subjects.clear();   //Integer.parseInt(key)
            int anh=dataController.searchSubjectById(subjects,Integer.parseInt(key));
            if(anh==-1){
                JOptionPane.showMessageDialog(rootPane,"this subject not exist");
            }else{
                selectedSubjectIndex=anh;
                //
                copySubject.add(subjects.get(anh));
              showResultSubjectSearch(copySubject);
            }
            
            
            
        }
        
        
        }else{
        JOptionPane.showMessageDialog(rootPane, "please select name or id for search");
        
        }
            
        
        
    }
    
    private void reloadSubject() {
subjects.clear();
subjects.addAll(dataController.readDataFromFile(DataController.SUBJECT_FILE));

    }

    private void showResultSubjectSearch(List<Subject> searchResult) {
tableModeSubject.setRowCount(0);
    for(var a : searchResult){
    showASubject(a);
}
    }
    
    private void refreshSubjects() {
            buttonGroupSortSubject.clearSelection();
            buttonGroupSearchSubject.clearSelection();
            txtSearchSubjectById.setText("");
             txtSearchSubjectByName.setText("");
             reloadSubject();
             tableModeSubject.setRowCount(0);
             selectedSubjectIndex=-1;
             showSubject();
    }
    
    ///student
 
    void addStudentCallBack(Student student) {
        students.add(student);
        showAStudent(student);
        writeDataToFile(2);

    }
  
    private void showAStudent(Student student) {
          Object[] row =new Object[]{
        student.getIdStudent(),student.getName(),student.getMajor()

    };
          
          tableModeStudent.addRow(row);
    }

    void editStudentCallback(Student student) {
        tableModeStudent.removeRow(selectedStudentIndex);
        Object row1=new Object[]{
            student.getIdStudent(),student.getName(),student.getMajor()
        };
        tableModeStudent.insertRow(selectedStudentIndex, (Object[]) row1);
                writeDataToFile(2);
                selectedStudentIndex=-1;
                
    }
    
    private void editStudent() {
        selectedStudentIndex=tbStudent.getSelectedRow();
        if(selectedStudentIndex>=0){
       //     reloadStudent();
           String index= (String) tableModeStudent.getValueAt(selectedStudentIndex, 0);
           
            int index1=dataController.searchStudentById(students,index); //dataController.searchStudentById(students, index);
            EditStudentFrm editStdentFrm=new EditStudentFrm(this,true,students.get(index1));
            editStdentFrm.setVisible(true);
        }
        else{
             JOptionPane.showMessageDialog(rootPane, "please select an student to edit");
        }
      //  selectedStudentIndex=-1;
    }

    private void showStudent() {
       for(var a:students){
           showAStudent(a);
       }
        
    }

    private void removeStudent() {
        int index=tbStudent.getSelectedRow();
        if(index>-1){
       var confirm=    JOptionPane.showConfirmDialog(rootPane,"you realy want to remove this student");
           if(confirm==JOptionPane.OK_OPTION){
                 String index2= (String) tableModeStudent.getValueAt(index, 0);
           
            int index1=dataController.searchStudentById(students,index2); //dataController.searchStudentById(students, index);
               students.remove(index);
               tableModeStudent.removeRow(index);
               dataController.<Student>writeToFile(students, DataController.STUDENT_FILE);
           }
        }
        else
            JOptionPane.showMessageDialog(rootPane, "please select a sutdent to remove");
        
        
    }

    private void detailStudent() {
             selectedStudentIndex=tbStudent.getSelectedRow();
            if(selectedStudentIndex>=0){
                String index1= (String) tableModeStudent.getValueAt(selectedStudentIndex, 0);
           
            int index2=dataController.searchStudentById(students,index1);
                
                DetailStudentFrm detailStudent=new DetailStudentFrm(this,true,students.get(index2));
                detailStudent.setVisible(true);
            }
            else
                JOptionPane.showMessageDialog(rootPane, "please select a sutdent to view detail");
    }

    private void sortStudent(Object obj) {
        tableModeStudent.setRowCount(0);
        if(obj.equals(rbSortStudentId)){
        dataController.sortStudentByIdASC(students);
        showStudent();
        }
        else{
               dataController.SortStudentByYear(students);
        showStudent();
        }
            
        
        
    }

    private void refreshStudent() {
        buttonGroupSearchSutent.clearSelection();
        buttonGroupSortStudent.clearSelection();
        txtSearchStudentById.setText("");
        txtSearchStudentByName.setText("");
        reloadStudent();
        tableModeStudent.setRowCount(0);
        showStudent();
    }

    private void reloadStudent() {
        students.clear();
        students.addAll(dataController.readDataFromFile(DataController.STUDENT_FILE));
    }

    private void searchStudent() {
       reloadStudent();
       List<Student>copyStudent=new ArrayList<>();
       //
       if(rbSearchStudentName.isSelected()){
           var name=txtSearchStudentByName.getText();
           if(!name.isEmpty()){
             //  students.clear();
               copyStudent.addAll(dataController.searchStudentByName(copyStudent, name));
              
               showSearchStudent(copyStudent);
               if(copyStudent.size()==0)
                   JOptionPane.showMessageDialog(rootPane,"this name not exist");
           }else
               JOptionPane.showMessageDialog(rootPane,"please entern name of student you want to find" );
       }
       //
       else if(rbSearchStudentId.isSelected()){
           String id=txtSearchStudentById.getText();
           if(!id.isEmpty()){
              // students.clear();
             int find=  dataController.searchStudentById(students, id);
             if(find==-1){
                 JOptionPane.showMessageDialog(rootPane,"this id not exist");
                 
             }
             else{
                  copyStudent.add(students.get(find));
               showSearchStudent(copyStudent);
                 
             }
            
              
                   
           }else
               JOptionPane.showMessageDialog(rootPane,"please entern name of student you want to find" );
       }
       ///
           else
        JOptionPane.showMessageDialog(rootPane, "please select id or name to search");
    }

    private void showSearchStudent(List<Student> students) {
        tableModeStudent.setRowCount(0);
        for(var a:students){
            showAStudent(a);
        }
    }

    private void LoginStudent() {
                var id=txtIdLogin.getText();
                        var password=txtPaswordLogin.getText();
                        
                        if(id!=null&&password!=null){
                            int index=dataController.searchStudentById(students, id);
                            if(index!=-1){
                                if(password.equals(students.get(index).getPassword())){
                                     DetailStudentFrm detailStudent=new DetailStudentFrm(this,true,students.get(index));
                detailStudent.setVisible(true);
                                }
                            }
                            else{
                                   JOptionPane.showMessageDialog(rootPane, "id or password not excact");
                            }
                            
                        }

    }

    

    
    
    
    
    
        

    
    
    
    
    
    
}
/////////